amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.4 # odom expected noise in rotation from rotation
    alpha2: 0.2 # odom expected noise in rotation from translation
    alpha3: 0.2 # odom expected noise in translation from translation
    alpha4: 0.4 # odom expected noise in translation from rotation
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: False
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 10.0 #2.0
    laser_max_range: 30.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 3000 #2000
    min_particles: 1000 #500
    odom_frame_id: "odom"
    pf_err: 0.1 #0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::OmniMotionModel" #nav2_amcl::DifferentialMotionModel
    save_pose_rate: 0.5
    sigma_hit: 0.05 #0.2
    tf_broadcast: True
    transform_tolerance: 0.5 #0.2
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.95
    z_max: 0.05
    z_rand: 0.05 # X% chance a measurement is not based on the map provided
    z_short: 0.05
    scan_topic: scan

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /tricycle_controller/odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    controller_frequency: 20.0
    goal_checker_plugins: ["goal_checker"]
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
      stateful: True
    FollowPath:
      # plugin: "nav2_rotation_shim_controller::RotationShimController"
      # angular_dist_threshold: 0.3
      # forward_sampling_distance: 0.5
      # rotate_to_heading_angular_vel: 1.0
      # max_angular_accel: 3.2
      # simulate_ahead_time: 1.0

      # primary_controller: "nav2_mppi_controller::MPPIController"
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 56
      model_dt: 0.05
      batch_size: 2000
      vx_std: 0.2
      vy_std: 0.2
      wz_std: 0.4
      vx_max: 1.0
      vx_min: -0.5
      wz_max: 2.0 #1.5
      iteration_count: 1
      prune_distance: 2.8 # Distance ahead of nearest point on path to robot to prune path to (m).
      retry_attempt_limit: 3
      transform_tolerance: 0.5 
      temperature: 0.15 # The closer this value to 0, the “more” we take in consideration controls with less cost, 0 mean use control with best cost, huge value will lead to just taking mean of all trajectories without cost consideration.
      gamma: 0.015
      motion_model: "Ackermann"
      visualize: False
      reset_period: 1.0 # (only in Humble)
      regenerate_noises: False
      TrajectoryVisualizer:
        trajectory_step: 5
        time_step: 3
      AckermannConstraints:
        min_turning_r: 1.4
      critics:
        [
          "ConstraintCritic",
          "GoalAngleCritic",
          "GoalCritic",
          "CostCritic",
          "PathAlignCritic",
          "PathAngleCritic",
          "PathFollowCritic",
          "PreferForwardCritic",
        ]
      ConstraintCritic:
        enabled: True
        cost_power: 1
        cost_weight: 4.0
      GoalAngleCritic:
        enabled: True
        cost_power: 1
        cost_weight: 3.0
        threshold_to_consider: 2.8
      GoalCritic:
        enabled: True
        cost_power: 1
        cost_weight: 5.0
        threshold_to_consider: 5.6
      CostCritic:
        enabled: True
        cost_power: 1
        cost_weight: 3.81
        critical_cost: 300.0
        consider_footprint: True
        collision_cost: 1000000.0
        near_goal_distance: 2.8
        trajectory_point_step: 5
      PathAlignCritic:
        enabled: True
        cost_power: 1
        cost_weight: 14.0
        max_path_occupancy_ratio: 0.07
        trajectory_point_step: 4
        threshold_to_consider: 5.6
        offset_from_furthest: 20
        use_path_orientations: True #False
      PathAngleCritic:
        enabled: True
        cost_power: 1
        cost_weight: 2.0
        offset_from_furthest: 4
        threshold_to_consider: 2.8
        max_angle_to_furthest: 1.0
        mode: 1 # 0: Forward Preference; 1: No directional preference; 2: Consider feasible path orientation, when using a feasible path whereas the path points have orientation information (e.g. Smac Planners), consider the path’s requested direction of travel to penalize path angles such that the robot will follow the path in the requested direction.
      PathFollowCritic:
        enabled: True
        cost_power: 1
        cost_weight: 5.0
        offset_from_furthest: 5
        threshold_to_consider: 5.6
      PreferForwardCritic:
        enabled: True
        cost_power: 1
        cost_weight: 1.0 #5.0
        threshold_to_consider: 5.6
      # ObstaclesCritic:
      #   enabled: True
      #   cost_power: 1
      #   repulsion_weight: 1.5
      #   critical_weight: 20.0
      #   consider_footprint: False
      #   collision_cost: 10000.0
      #   collision_margin_distance: 0.1
      #   near_goal_distance: 0.5
      #   inflation_radius: 0.55 # (only in Humble)
      #   cost_scaling_factor: 10.0 # (only in Humble)

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 4.0
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      rolling_window: True
      width: 6
      height: 6
      resolution: 0.05
      footprint: "[ [0.38, 0.33], [0.38, -0.33], [-0.38, -0.33], [-0.38, 0.33] ]"
      footprint_padding: 0.1
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 2.0
        inflation_radius: 0.7
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan_marking scan_clearing
        scan_marking:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: False
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
        scan_clearing:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: False
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      transform_tolerance: 0.5 #0.2
      global_frame: map
      robot_base_frame: base_footprint
      use_sim_time: True
      footprint: "[ [0.38, 0.33], [0.38, -0.33], [0.38, -0.33], [0.38, 0.33] ]"
      footprint_padding: 0.1
      resolution: 0.05
      track_unknown_space: True
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.5
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan_marking scan_clearing
        scan_marking:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: False
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 8.0 #3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #2.5
          obstacle_min_range: 0.0
        scan_clearing:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: False
          data_type: "LaserScan"
          raytrace_max_range: 8.0 #3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 8.0 #2.5
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid" 
      downsample_costmap: False           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      tolerance: 5.2                      # dist-to-goal heuristic cost (distance) for valid tolerance endpoints if exact goal cannot be found.
      allow_unknown: False                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # Maximum number of iterations after within tolerances to continue to try to find exact solution
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 7.1  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting. This should never be smaller than 4-5x the minimum turning radius being used, or planning times will begin to spike
      analytic_expansion_max_cost: 200.0  # The maximum single cost for any part of an analytic expansion to contain and be valid, except when necessary on approach to goal
      analytic_expansion_max_cost_override: True  #  Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)
      minimum_turning_radius: 1.40        # minimum turning radius in m of path / vehicle
      reverse_penalty: 1.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0
      non_straight_penalty: 1.0           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      debug_visualizations: False         # For Hybrid nodes: Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance.
      use_quadratic_cost_penalty: False
      downsample_obstacle_heuristic: True
      allow_primitive_interpolation: False
      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the pathy
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: True
        refinement_num: 2

smoother_server:
  ros__parameters:
    use_sim_time: True
    robot_base_frame: base_footprint
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins:
      ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: map
    robot_base_frame: base_footprint
    transform_tolerance: 0.5 #0.2
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.5
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: False
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    # max_velocity: [0.26, 0.0, 1.0]
    # min_velocity: [-0.26, 0.0, -1.0]
    max_velocity: [2.2, 0.0, 1.0]
    min_velocity: [-2.2, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "/tricycle_controller/odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
# collision_monitor:
# ros__parameters:
#   base_frame_id: "base_footprint"
#   odom_frame_id: "odom"
#   cmd_vel_in_topic: "cmd_vel_smoothed"
#   cmd_vel_out_topic: "cmd_vel"
#   state_topic: "collision_monitor_state"
#   transform_tolerance: 0.5
#   source_timeout: 1.0
#   base_shift_correction: True
#   stop_pub_timeout: 2.0
#   # Polygons represent zone around the robot for "stop", "slowdown" and "limit" action types,
#   # and robot footprint for "approach" action type.
#   polygons: ["FootprintApproach"]
#   FootprintApproach:
#     type: "polygon"
#     action_type: "approach"
#     footprint_topic: "/local_costmap/published_footprint"
#     time_before_collision: 1.2
#     simulation_time_step: 0.1
#     min_points: 6
#     visualize: False
#     enabled: True
#   observation_sources: ["scan"]
#   scan:
#     type: "scan"
#     topic: "/scan"
#     min_height: 0.15
#     max_height: 2.0
#     enabled: True
